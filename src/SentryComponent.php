<?php
namespace p4it\sentry;

use Sentry\ClientBuilder;
use Sentry\SentrySdk;
use Sentry\Severity;
use Sentry\State\Hub;
use Sentry\State\Scope;
use Sentry\Transport\NullTransport;
use Sentry\Transport\TransportFactoryInterface;
use yii\base\Component;
use yii\base\InvalidConfigException;
use yii\helpers\ArrayHelper;

/**
 * Class SentryComponent
 *
 * @package p4it\sentry
 *
 * @property \Sentry\ClientInterface $client
 */
class SentryComponent extends Component
{
    public const NULL_TRANSPORT = 'nullTransport';

    public string $dns;

    public ?string $transportMode = null;
    
    public array $clientOptions = [];

    public function init()
    {
        $options = ArrayHelper::merge($this->clientOptions, [
            'dsn' => $this->dns,
        ]);

        $builder = ClientBuilder::create($options);
        if ($this->transportMode) {
            $transport = $this->{$this->transportMode}($options);
            $builder->setTransportFactory($transport);
        }

        SentrySdk::getCurrentHub()->bindClient($builder->getClient());

        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @return \Sentry\ClientInterface
     * @throws InvalidConfigException
     */
    public function getClient(): \Sentry\ClientInterface
    {
        $client = SentrySdk::getCurrentHub()->getClient();

        if(!$client) {
            throw new InvalidConfigException('Client setup is missing');
        }

        return $client;
    }

    /**
     * @param \Throwable $exception
     * @param Scope|null $scope
     * @return string|null
     * @throws InvalidConfigException
     */
    public function captureException(\Throwable $exception, ?Scope $scope = null): ?string
    {
        return $this->getClient()->captureException($exception, $scope);
    }

    /**
     * @param string $message
     * @param Severity|null $level
     * @param Scope|null $scope
     * @return string|null
     * @throws InvalidConfigException
     */
    public function captureMessage(string $message, ?Severity $level = null, ?Scope $scope = null): ?string
    {
        return $this->getClient()->captureMessage($message, $level, $scope);
    }

    protected function nullTransport($options)
    {
        return new class implements TransportFactoryInterface {

            public function create(\Sentry\Options $options): \Sentry\Transport\TransportInterface
            {
                return new NullTransport();
            }
        };
    }
}
