<?php
namespace papppeter\sentry\log;

use Sentry\State\Scope;
use yii\base\Arrayable;
use yii\base\ArrayableTrait;
use yii\base\Component;

/**
 *
 * @property array $fingerprint
 */
class SentryMessage extends Component implements \Serializable, Arrayable
{
    use ArrayableTrait;

    /**
     * @var Scope
     */
    protected $scope;

    /**
     * @var mixed
     */
    public $message;

    /**
     * @param array $config
     * @return SentryMessage
     */
    public static function create($config = []) {
        return new self($config);
    }

    public function fields()
    {
        return [
            'message',
            'extra' => static function(self $message) {
                /** @var Scope $scope */
                $scope = $message->getScope();
                return $scope->getExtra();
            },
            'tags' => static function(self $message) {
                /** @var Scope $scope */
                $scope = $message->getScope();
                return $scope->getTags();
            },
            'fingerprint' => static function(self $message) {
                /** @var Scope $scope */
                $scope = $message->getScope();
                return $scope->getFingerprint();
            },
        ];
    }

    public function init()
    {
        $this->scope = new Scope();
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * Sets a new tag in the tags context.
     *
     * @param string $key   The key that uniquely identifies the tag
     * @param string $value The value
     *
     * @return $this
     */
    public function setTag(string $key, string $value): self
    {
        $this->scope->setTag($key, $value);

        return $this;
    }

    /**
     * Sets a new information in the extra context.
     *
     * @param string $key   The key that uniquely identifies the information
     * @param mixed  $value The value
     *
     * @return $this
     */
    public function setExtra(string $key, $value): self
    {
        $this->scope->setExtra($key, $value);

        return $this;
    }

    /**
     * Sets the list of strings used to dictate the deduplication of this event.
     *
     * @param array $fingerprint
     * @return $this
     */
    public function setFingerprint(array $fingerprint): self
    {
        $this->scope->setFingerprint($fingerprint);

        return $this;
    }

    /**
     * @param mixed $message
     * @return SentryMessage
     */
    public function setMessage($message): self
    {
        $this->message = $message;
        return $this;
    }

    /**
     * @return Scope
     */
    public function getScope(): Scope
    {
        return $this->scope;
    }

    /**
     * @return mixed
     */
    public function getMessage()
    {
        return $this->message;
    }

    /**
     * @return string|void
     * @throws \Exception
     */
    public function serialize()
    {
        throw new \Exception();
    }

    /**
     * @param $serialized
     * @throws \Exception
     */
    public function unserialize($serialized)
    {
        throw new \Exception();
    }
}